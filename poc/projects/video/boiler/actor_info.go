// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ActorInfo is an object representing the database table.
type ActorInfo struct {
	ActorID   uint16      `boil:"actor_id" json:"actor_id" toml:"actor_id" yaml:"actor_id"`
	FirstName string      `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName  string      `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	FilmInfo  null.String `boil:"film_info" json:"film_info,omitempty" toml:"film_info" yaml:"film_info,omitempty"`
}

var ActorInfoColumns = struct {
	ActorID   string
	FirstName string
	LastName  string
	FilmInfo  string
}{
	ActorID:   "actor_id",
	FirstName: "first_name",
	LastName:  "last_name",
	FilmInfo:  "film_info",
}

var ActorInfoTableColumns = struct {
	ActorID   string
	FirstName string
	LastName  string
	FilmInfo  string
}{
	ActorID:   "actor_info.actor_id",
	FirstName: "actor_info.first_name",
	LastName:  "actor_info.last_name",
	FilmInfo:  "actor_info.film_info",
}

// Generated where

var ActorInfoWhere = struct {
	ActorID   whereHelperuint16
	FirstName whereHelperstring
	LastName  whereHelperstring
	FilmInfo  whereHelpernull_String
}{
	ActorID:   whereHelperuint16{field: "`actor_info`.`actor_id`"},
	FirstName: whereHelperstring{field: "`actor_info`.`first_name`"},
	LastName:  whereHelperstring{field: "`actor_info`.`last_name`"},
	FilmInfo:  whereHelpernull_String{field: "`actor_info`.`film_info`"},
}

var (
	actorInfoAllColumns            = []string{"actor_id", "first_name", "last_name", "film_info"}
	actorInfoColumnsWithoutDefault = []string{"first_name", "last_name", "film_info"}
	actorInfoColumnsWithDefault    = []string{"actor_id"}
	actorInfoPrimaryKeyColumns     = []string{}
	actorInfoGeneratedColumns      = []string{}
)

type (
	// ActorInfoSlice is an alias for a slice of pointers to ActorInfo.
	// This should almost always be used instead of []ActorInfo.
	ActorInfoSlice []*ActorInfo
	// ActorInfoHook is the signature for custom ActorInfo hook methods
	ActorInfoHook func(context.Context, boil.ContextExecutor, *ActorInfo) error

	actorInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	actorInfoType           = reflect.TypeOf(&ActorInfo{})
	actorInfoMapping        = queries.MakeStructMapping(actorInfoType)
	actorInfoInsertCacheMut sync.RWMutex
	actorInfoInsertCache    = make(map[string]insertCache)
	actorInfoUpdateCacheMut sync.RWMutex
	actorInfoUpdateCache    = make(map[string]updateCache)
	actorInfoUpsertCacheMut sync.RWMutex
	actorInfoUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var actorInfoAfterSelectMu sync.Mutex
var actorInfoAfterSelectHooks []ActorInfoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ActorInfo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range actorInfoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddActorInfoHook registers your hook function for all future operations.
func AddActorInfoHook(hookPoint boil.HookPoint, actorInfoHook ActorInfoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		actorInfoAfterSelectMu.Lock()
		actorInfoAfterSelectHooks = append(actorInfoAfterSelectHooks, actorInfoHook)
		actorInfoAfterSelectMu.Unlock()
	}
}

// One returns a single actorInfo record from the query.
func (q actorInfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ActorInfo, error) {
	o := &ActorInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for actor_info")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ActorInfo records from the query.
func (q actorInfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (ActorInfoSlice, error) {
	var o []*ActorInfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ActorInfo slice")
	}

	if len(actorInfoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ActorInfo records in the query.
func (q actorInfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count actor_info rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q actorInfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if actor_info exists")
	}

	return count > 0, nil
}

// ActorInfos retrieves all the records using an executor.
func ActorInfos(mods ...qm.QueryMod) actorInfoQuery {
	mods = append(mods, qm.From("`actor_info`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`actor_info`.*"})
	}

	return actorInfoQuery{q}
}
