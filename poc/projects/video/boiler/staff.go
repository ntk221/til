// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Staff is an object representing the database table.
type Staff struct {
	StaffID    uint8       `boil:"staff_id" json:"staff_id" toml:"staff_id" yaml:"staff_id"`
	FirstName  string      `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName   string      `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	AddressID  uint16      `boil:"address_id" json:"address_id" toml:"address_id" yaml:"address_id"`
	Picture    null.Bytes  `boil:"picture" json:"picture,omitempty" toml:"picture" yaml:"picture,omitempty"`
	Email      null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	StoreID    uint8       `boil:"store_id" json:"store_id" toml:"store_id" yaml:"store_id"`
	Active     int8        `boil:"active" json:"active" toml:"active" yaml:"active"`
	Username   string      `boil:"username" json:"username" toml:"username" yaml:"username"`
	Password   null.String `boil:"password" json:"password,omitempty" toml:"password" yaml:"password,omitempty"`
	LastUpdate time.Time   `boil:"last_update" json:"last_update" toml:"last_update" yaml:"last_update"`

	R *staffR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L staffL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StaffColumns = struct {
	StaffID    string
	FirstName  string
	LastName   string
	AddressID  string
	Picture    string
	Email      string
	StoreID    string
	Active     string
	Username   string
	Password   string
	LastUpdate string
}{
	StaffID:    "staff_id",
	FirstName:  "first_name",
	LastName:   "last_name",
	AddressID:  "address_id",
	Picture:    "picture",
	Email:      "email",
	StoreID:    "store_id",
	Active:     "active",
	Username:   "username",
	Password:   "password",
	LastUpdate: "last_update",
}

var StaffTableColumns = struct {
	StaffID    string
	FirstName  string
	LastName   string
	AddressID  string
	Picture    string
	Email      string
	StoreID    string
	Active     string
	Username   string
	Password   string
	LastUpdate string
}{
	StaffID:    "staff.staff_id",
	FirstName:  "staff.first_name",
	LastName:   "staff.last_name",
	AddressID:  "staff.address_id",
	Picture:    "staff.picture",
	Email:      "staff.email",
	StoreID:    "staff.store_id",
	Active:     "staff.active",
	Username:   "staff.username",
	Password:   "staff.password",
	LastUpdate: "staff.last_update",
}

// Generated where

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var StaffWhere = struct {
	StaffID    whereHelperuint8
	FirstName  whereHelperstring
	LastName   whereHelperstring
	AddressID  whereHelperuint16
	Picture    whereHelpernull_Bytes
	Email      whereHelpernull_String
	StoreID    whereHelperuint8
	Active     whereHelperint8
	Username   whereHelperstring
	Password   whereHelpernull_String
	LastUpdate whereHelpertime_Time
}{
	StaffID:    whereHelperuint8{field: "`staff`.`staff_id`"},
	FirstName:  whereHelperstring{field: "`staff`.`first_name`"},
	LastName:   whereHelperstring{field: "`staff`.`last_name`"},
	AddressID:  whereHelperuint16{field: "`staff`.`address_id`"},
	Picture:    whereHelpernull_Bytes{field: "`staff`.`picture`"},
	Email:      whereHelpernull_String{field: "`staff`.`email`"},
	StoreID:    whereHelperuint8{field: "`staff`.`store_id`"},
	Active:     whereHelperint8{field: "`staff`.`active`"},
	Username:   whereHelperstring{field: "`staff`.`username`"},
	Password:   whereHelpernull_String{field: "`staff`.`password`"},
	LastUpdate: whereHelpertime_Time{field: "`staff`.`last_update`"},
}

// StaffRels is where relationship names are stored.
var StaffRels = struct {
	Address           string
	Store             string
	ManagerStaffStore string
	Payments          string
	Rentals           string
}{
	Address:           "Address",
	Store:             "Store",
	ManagerStaffStore: "ManagerStaffStore",
	Payments:          "Payments",
	Rentals:           "Rentals",
}

// staffR is where relationships are stored.
type staffR struct {
	Address           *Address     `boil:"Address" json:"Address" toml:"Address" yaml:"Address"`
	Store             *Store       `boil:"Store" json:"Store" toml:"Store" yaml:"Store"`
	ManagerStaffStore *Store       `boil:"ManagerStaffStore" json:"ManagerStaffStore" toml:"ManagerStaffStore" yaml:"ManagerStaffStore"`
	Payments          PaymentSlice `boil:"Payments" json:"Payments" toml:"Payments" yaml:"Payments"`
	Rentals           RentalSlice  `boil:"Rentals" json:"Rentals" toml:"Rentals" yaml:"Rentals"`
}

// NewStruct creates a new relationship struct
func (*staffR) NewStruct() *staffR {
	return &staffR{}
}

func (r *staffR) GetAddress() *Address {
	if r == nil {
		return nil
	}
	return r.Address
}

func (r *staffR) GetStore() *Store {
	if r == nil {
		return nil
	}
	return r.Store
}

func (r *staffR) GetManagerStaffStore() *Store {
	if r == nil {
		return nil
	}
	return r.ManagerStaffStore
}

func (r *staffR) GetPayments() PaymentSlice {
	if r == nil {
		return nil
	}
	return r.Payments
}

func (r *staffR) GetRentals() RentalSlice {
	if r == nil {
		return nil
	}
	return r.Rentals
}

// staffL is where Load methods for each relationship are stored.
type staffL struct{}

var (
	staffAllColumns            = []string{"staff_id", "first_name", "last_name", "address_id", "picture", "email", "store_id", "active", "username", "password", "last_update"}
	staffColumnsWithoutDefault = []string{"first_name", "last_name", "address_id", "picture", "email", "store_id", "username", "password"}
	staffColumnsWithDefault    = []string{"staff_id", "active", "last_update"}
	staffPrimaryKeyColumns     = []string{"staff_id"}
	staffGeneratedColumns      = []string{}
)

type (
	// StaffSlice is an alias for a slice of pointers to Staff.
	// This should almost always be used instead of []Staff.
	StaffSlice []*Staff
	// StaffHook is the signature for custom Staff hook methods
	StaffHook func(context.Context, boil.ContextExecutor, *Staff) error

	staffQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	staffType                 = reflect.TypeOf(&Staff{})
	staffMapping              = queries.MakeStructMapping(staffType)
	staffPrimaryKeyMapping, _ = queries.BindMapping(staffType, staffMapping, staffPrimaryKeyColumns)
	staffInsertCacheMut       sync.RWMutex
	staffInsertCache          = make(map[string]insertCache)
	staffUpdateCacheMut       sync.RWMutex
	staffUpdateCache          = make(map[string]updateCache)
	staffUpsertCacheMut       sync.RWMutex
	staffUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var staffAfterSelectMu sync.Mutex
var staffAfterSelectHooks []StaffHook

var staffBeforeInsertMu sync.Mutex
var staffBeforeInsertHooks []StaffHook
var staffAfterInsertMu sync.Mutex
var staffAfterInsertHooks []StaffHook

var staffBeforeUpdateMu sync.Mutex
var staffBeforeUpdateHooks []StaffHook
var staffAfterUpdateMu sync.Mutex
var staffAfterUpdateHooks []StaffHook

var staffBeforeDeleteMu sync.Mutex
var staffBeforeDeleteHooks []StaffHook
var staffAfterDeleteMu sync.Mutex
var staffAfterDeleteHooks []StaffHook

var staffBeforeUpsertMu sync.Mutex
var staffBeforeUpsertHooks []StaffHook
var staffAfterUpsertMu sync.Mutex
var staffAfterUpsertHooks []StaffHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Staff) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Staff) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Staff) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Staff) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Staff) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Staff) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Staff) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Staff) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Staff) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staffAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStaffHook registers your hook function for all future operations.
func AddStaffHook(hookPoint boil.HookPoint, staffHook StaffHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		staffAfterSelectMu.Lock()
		staffAfterSelectHooks = append(staffAfterSelectHooks, staffHook)
		staffAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		staffBeforeInsertMu.Lock()
		staffBeforeInsertHooks = append(staffBeforeInsertHooks, staffHook)
		staffBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		staffAfterInsertMu.Lock()
		staffAfterInsertHooks = append(staffAfterInsertHooks, staffHook)
		staffAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		staffBeforeUpdateMu.Lock()
		staffBeforeUpdateHooks = append(staffBeforeUpdateHooks, staffHook)
		staffBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		staffAfterUpdateMu.Lock()
		staffAfterUpdateHooks = append(staffAfterUpdateHooks, staffHook)
		staffAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		staffBeforeDeleteMu.Lock()
		staffBeforeDeleteHooks = append(staffBeforeDeleteHooks, staffHook)
		staffBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		staffAfterDeleteMu.Lock()
		staffAfterDeleteHooks = append(staffAfterDeleteHooks, staffHook)
		staffAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		staffBeforeUpsertMu.Lock()
		staffBeforeUpsertHooks = append(staffBeforeUpsertHooks, staffHook)
		staffBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		staffAfterUpsertMu.Lock()
		staffAfterUpsertHooks = append(staffAfterUpsertHooks, staffHook)
		staffAfterUpsertMu.Unlock()
	}
}

// One returns a single staff record from the query.
func (q staffQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Staff, error) {
	o := &Staff{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for staff")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Staff records from the query.
func (q staffQuery) All(ctx context.Context, exec boil.ContextExecutor) (StaffSlice, error) {
	var o []*Staff

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Staff slice")
	}

	if len(staffAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Staff records in the query.
func (q staffQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count staff rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q staffQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if staff exists")
	}

	return count > 0, nil
}

// Address pointed to by the foreign key.
func (o *Staff) Address(mods ...qm.QueryMod) addressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`address_id` = ?", o.AddressID),
	}

	queryMods = append(queryMods, mods...)

	return Addresses(queryMods...)
}

// Store pointed to by the foreign key.
func (o *Staff) Store(mods ...qm.QueryMod) storeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`store_id` = ?", o.StoreID),
	}

	queryMods = append(queryMods, mods...)

	return Stores(queryMods...)
}

// ManagerStaffStore pointed to by the foreign key.
func (o *Staff) ManagerStaffStore(mods ...qm.QueryMod) storeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`manager_staff_id` = ?", o.StaffID),
	}

	queryMods = append(queryMods, mods...)

	return Stores(queryMods...)
}

// Payments retrieves all the payment's Payments with an executor.
func (o *Staff) Payments(mods ...qm.QueryMod) paymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`payment`.`staff_id`=?", o.StaffID),
	)

	return Payments(queryMods...)
}

// Rentals retrieves all the rental's Rentals with an executor.
func (o *Staff) Rentals(mods ...qm.QueryMod) rentalQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`rental`.`staff_id`=?", o.StaffID),
	)

	return Rentals(queryMods...)
}

// LoadAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (staffL) LoadAddress(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		var ok bool
		object, ok = maybeStaff.(*Staff)
		if !ok {
			object = new(Staff)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStaff))
			}
		}
	} else {
		s, ok := maybeStaff.(*[]*Staff)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStaff))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args[object.AddressID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}

			args[obj.AddressID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`address`),
		qm.WhereIn(`address.address_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Address")
	}

	var resultSlice []*Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Address")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for address")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for address")
	}

	if len(addressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Address = foreign
		if foreign.R == nil {
			foreign.R = &addressR{}
		}
		foreign.R.Staffs = append(foreign.R.Staffs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AddressID == foreign.AddressID {
				local.R.Address = foreign
				if foreign.R == nil {
					foreign.R = &addressR{}
				}
				foreign.R.Staffs = append(foreign.R.Staffs, local)
				break
			}
		}
	}

	return nil
}

// LoadStore allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (staffL) LoadStore(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		var ok bool
		object, ok = maybeStaff.(*Staff)
		if !ok {
			object = new(Staff)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStaff))
			}
		}
	} else {
		s, ok := maybeStaff.(*[]*Staff)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStaff))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args[object.StoreID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}

			args[obj.StoreID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`store`),
		qm.WhereIn(`store.store_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Store")
	}

	var resultSlice []*Store
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Store")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for store")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for store")
	}

	if len(storeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Store = foreign
		if foreign.R == nil {
			foreign.R = &storeR{}
		}
		foreign.R.Staffs = append(foreign.R.Staffs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StoreID == foreign.StoreID {
				local.R.Store = foreign
				if foreign.R == nil {
					foreign.R = &storeR{}
				}
				foreign.R.Staffs = append(foreign.R.Staffs, local)
				break
			}
		}
	}

	return nil
}

// LoadManagerStaffStore allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (staffL) LoadManagerStaffStore(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		var ok bool
		object, ok = maybeStaff.(*Staff)
		if !ok {
			object = new(Staff)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStaff))
			}
		}
	} else {
		s, ok := maybeStaff.(*[]*Staff)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStaff))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args[object.StaffID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}

			args[obj.StaffID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`store`),
		qm.WhereIn(`store.manager_staff_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Store")
	}

	var resultSlice []*Store
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Store")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for store")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for store")
	}

	if len(storeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ManagerStaffStore = foreign
		if foreign.R == nil {
			foreign.R = &storeR{}
		}
		foreign.R.ManagerStaff = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StaffID == foreign.ManagerStaffID {
				local.R.ManagerStaffStore = foreign
				if foreign.R == nil {
					foreign.R = &storeR{}
				}
				foreign.R.ManagerStaff = local
				break
			}
		}
	}

	return nil
}

// LoadPayments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (staffL) LoadPayments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		var ok bool
		object, ok = maybeStaff.(*Staff)
		if !ok {
			object = new(Staff)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStaff))
			}
		}
	} else {
		s, ok := maybeStaff.(*[]*Staff)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStaff))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args[object.StaffID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}
			args[obj.StaffID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`payment`),
		qm.WhereIn(`payment.staff_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payment")
	}

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on payment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payment")
	}

	if len(paymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Payments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentR{}
			}
			foreign.R.Staff = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StaffID == foreign.StaffID {
				local.R.Payments = append(local.R.Payments, foreign)
				if foreign.R == nil {
					foreign.R = &paymentR{}
				}
				foreign.R.Staff = local
				break
			}
		}
	}

	return nil
}

// LoadRentals allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (staffL) LoadRentals(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaff interface{}, mods queries.Applicator) error {
	var slice []*Staff
	var object *Staff

	if singular {
		var ok bool
		object, ok = maybeStaff.(*Staff)
		if !ok {
			object = new(Staff)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStaff))
			}
		}
	} else {
		s, ok := maybeStaff.(*[]*Staff)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStaff))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &staffR{}
		}
		args[object.StaffID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffR{}
			}
			args[obj.StaffID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`rental`),
		qm.WhereIn(`rental.staff_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load rental")
	}

	var resultSlice []*Rental
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice rental")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on rental")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rental")
	}

	if len(rentalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Rentals = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &rentalR{}
			}
			foreign.R.Staff = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.StaffID == foreign.StaffID {
				local.R.Rentals = append(local.R.Rentals, foreign)
				if foreign.R == nil {
					foreign.R = &rentalR{}
				}
				foreign.R.Staff = local
				break
			}
		}
	}

	return nil
}

// SetAddress of the staff to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.Staffs.
func (o *Staff) SetAddress(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Address) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `staff` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"address_id"}),
		strmangle.WhereClause("`", "`", 0, staffPrimaryKeyColumns),
	)
	values := []interface{}{related.AddressID, o.StaffID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AddressID = related.AddressID
	if o.R == nil {
		o.R = &staffR{
			Address: related,
		}
	} else {
		o.R.Address = related
	}

	if related.R == nil {
		related.R = &addressR{
			Staffs: StaffSlice{o},
		}
	} else {
		related.R.Staffs = append(related.R.Staffs, o)
	}

	return nil
}

// SetStore of the staff to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.Staffs.
func (o *Staff) SetStore(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Store) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `staff` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"store_id"}),
		strmangle.WhereClause("`", "`", 0, staffPrimaryKeyColumns),
	)
	values := []interface{}{related.StoreID, o.StaffID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StoreID = related.StoreID
	if o.R == nil {
		o.R = &staffR{
			Store: related,
		}
	} else {
		o.R.Store = related
	}

	if related.R == nil {
		related.R = &storeR{
			Staffs: StaffSlice{o},
		}
	} else {
		related.R.Staffs = append(related.R.Staffs, o)
	}

	return nil
}

// SetManagerStaffStore of the staff to the related item.
// Sets o.R.ManagerStaffStore to related.
// Adds o to related.R.ManagerStaff.
func (o *Staff) SetManagerStaffStore(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Store) error {
	var err error

	if insert {
		related.ManagerStaffID = o.StaffID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `store` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"manager_staff_id"}),
			strmangle.WhereClause("`", "`", 0, storePrimaryKeyColumns),
		)
		values := []interface{}{o.StaffID, related.StoreID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ManagerStaffID = o.StaffID
	}

	if o.R == nil {
		o.R = &staffR{
			ManagerStaffStore: related,
		}
	} else {
		o.R.ManagerStaffStore = related
	}

	if related.R == nil {
		related.R = &storeR{
			ManagerStaff: o,
		}
	} else {
		related.R.ManagerStaff = o
	}
	return nil
}

// AddPayments adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Staff appropriately.
func (o *Staff) AddPayments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Payment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StaffID = o.StaffID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `payment` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"staff_id"}),
				strmangle.WhereClause("`", "`", 0, paymentPrimaryKeyColumns),
			)
			values := []interface{}{o.StaffID, rel.PaymentID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StaffID = o.StaffID
		}
	}

	if o.R == nil {
		o.R = &staffR{
			Payments: related,
		}
	} else {
		o.R.Payments = append(o.R.Payments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentR{
				Staff: o,
			}
		} else {
			rel.R.Staff = o
		}
	}
	return nil
}

// AddRentals adds the given related objects to the existing relationships
// of the staff, optionally inserting them as new records.
// Appends related to o.R.Rentals.
// Sets related.R.Staff appropriately.
func (o *Staff) AddRentals(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Rental) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StaffID = o.StaffID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `rental` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"staff_id"}),
				strmangle.WhereClause("`", "`", 0, rentalPrimaryKeyColumns),
			)
			values := []interface{}{o.StaffID, rel.RentalID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StaffID = o.StaffID
		}
	}

	if o.R == nil {
		o.R = &staffR{
			Rentals: related,
		}
	} else {
		o.R.Rentals = append(o.R.Rentals, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &rentalR{
				Staff: o,
			}
		} else {
			rel.R.Staff = o
		}
	}
	return nil
}

// Staffs retrieves all the records using an executor.
func Staffs(mods ...qm.QueryMod) staffQuery {
	mods = append(mods, qm.From("`staff`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`staff`.*"})
	}

	return staffQuery{q}
}

// FindStaff retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStaff(ctx context.Context, exec boil.ContextExecutor, staffID uint8, selectCols ...string) (*Staff, error) {
	staffObj := &Staff{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `staff` where `staff_id`=?", sel,
	)

	q := queries.Raw(query, staffID)

	err := q.Bind(ctx, exec, staffObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from staff")
	}

	if err = staffObj.doAfterSelectHooks(ctx, exec); err != nil {
		return staffObj, err
	}

	return staffObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Staff) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no staff provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(staffColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	staffInsertCacheMut.RLock()
	cache, cached := staffInsertCache[key]
	staffInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			staffAllColumns,
			staffColumnsWithDefault,
			staffColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(staffType, staffMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `staff` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `staff` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `staff` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, staffPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into staff")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.StaffID = uint8(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == staffMapping["staff_id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.StaffID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for staff")
	}

CacheNoHooks:
	if !cached {
		staffInsertCacheMut.Lock()
		staffInsertCache[key] = cache
		staffInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Staff.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Staff) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	staffUpdateCacheMut.RLock()
	cache, cached := staffUpdateCache[key]
	staffUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			staffAllColumns,
			staffPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update staff, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `staff` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, staffPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, append(wl, staffPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update staff row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for staff")
	}

	if !cached {
		staffUpdateCacheMut.Lock()
		staffUpdateCache[key] = cache
		staffUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q staffQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for staff")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for staff")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StaffSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `staff` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, staffPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in staff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all staff")
	}
	return rowsAff, nil
}

var mySQLStaffUniqueColumns = []string{
	"staff_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Staff) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no staff provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(staffColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLStaffUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	staffUpsertCacheMut.RLock()
	cache, cached := staffUpsertCache[key]
	staffUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			staffAllColumns,
			staffColumnsWithDefault,
			staffColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			staffAllColumns,
			staffPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert staff, could not build update column list")
		}

		ret := strmangle.SetComplement(staffAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`staff`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `staff` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(staffType, staffMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(staffType, staffMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for staff")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.StaffID = uint8(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == staffMapping["staff_id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(staffType, staffMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for staff")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for staff")
	}

CacheNoHooks:
	if !cached {
		staffUpsertCacheMut.Lock()
		staffUpsertCache[key] = cache
		staffUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Staff record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Staff) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Staff provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), staffPrimaryKeyMapping)
	sql := "DELETE FROM `staff` WHERE `staff_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from staff")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for staff")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q staffQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no staffQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from staff")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for staff")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StaffSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(staffBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `staff` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, staffPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from staff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for staff")
	}

	if len(staffAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Staff) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStaff(ctx, exec, o.StaffID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StaffSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StaffSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `staff`.* FROM `staff` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, staffPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StaffSlice")
	}

	*o = slice

	return nil
}

// StaffExists checks if the Staff row exists.
func StaffExists(ctx context.Context, exec boil.ContextExecutor, staffID uint8) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `staff` where `staff_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, staffID)
	}
	row := exec.QueryRowContext(ctx, sql, staffID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if staff exists")
	}

	return exists, nil
}

// Exists checks if the Staff row exists.
func (o *Staff) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StaffExists(ctx, exec, o.StaffID)
}
