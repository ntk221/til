// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CustomerList is an object representing the database table.
type CustomerList struct {
	ID      int         `boil:"ID" json:"ID" toml:"ID" yaml:"ID"`
	Name    null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Address string      `boil:"address" json:"address" toml:"address" yaml:"address"`
	ZipCode null.String `boil:"zip code" json:"zip code,omitempty" toml:"zip code" yaml:"zip code,omitempty"`
	Phone   string      `boil:"phone" json:"phone" toml:"phone" yaml:"phone"`
	City    string      `boil:"city" json:"city" toml:"city" yaml:"city"`
	Country string      `boil:"country" json:"country" toml:"country" yaml:"country"`
	Notes   string      `boil:"notes" json:"notes" toml:"notes" yaml:"notes"`
	SID     int8        `boil:"SID" json:"SID" toml:"SID" yaml:"SID"`
}

var CustomerListColumns = struct {
	ID      string
	Name    string
	Address string
	ZipCode string
	Phone   string
	City    string
	Country string
	Notes   string
	SID     string
}{
	ID:      "ID",
	Name:    "name",
	Address: "address",
	ZipCode: "zip code",
	Phone:   "phone",
	City:    "city",
	Country: "country",
	Notes:   "notes",
	SID:     "SID",
}

var CustomerListTableColumns = struct {
	ID      string
	Name    string
	Address string
	ZipCode string
	Phone   string
	City    string
	Country string
	Notes   string
	SID     string
}{
	ID:      "customer_list.ID",
	Name:    "customer_list.name",
	Address: "customer_list.address",
	ZipCode: "customer_list.zip code",
	Phone:   "customer_list.phone",
	City:    "customer_list.city",
	Country: "customer_list.country",
	Notes:   "customer_list.notes",
	SID:     "customer_list.SID",
}

// Generated where

var CustomerListWhere = struct {
	ID      whereHelperint
	Name    whereHelpernull_String
	Address whereHelperstring
	ZipCode whereHelpernull_String
	Phone   whereHelperstring
	City    whereHelperstring
	Country whereHelperstring
	Notes   whereHelperstring
	SID     whereHelperint8
}{
	ID:      whereHelperint{field: "`customer_list`.`ID`"},
	Name:    whereHelpernull_String{field: "`customer_list`.`name`"},
	Address: whereHelperstring{field: "`customer_list`.`address`"},
	ZipCode: whereHelpernull_String{field: "`customer_list`.`zip code`"},
	Phone:   whereHelperstring{field: "`customer_list`.`phone`"},
	City:    whereHelperstring{field: "`customer_list`.`city`"},
	Country: whereHelperstring{field: "`customer_list`.`country`"},
	Notes:   whereHelperstring{field: "`customer_list`.`notes`"},
	SID:     whereHelperint8{field: "`customer_list`.`SID`"},
}

var (
	customerListAllColumns            = []string{"ID", "name", "address", "zip code", "phone", "city", "country", "notes", "SID"}
	customerListColumnsWithoutDefault = []string{"name", "address", "zip code", "phone", "city", "country", "notes", "SID"}
	customerListColumnsWithDefault    = []string{"ID"}
	customerListPrimaryKeyColumns     = []string{}
	customerListGeneratedColumns      = []string{}
)

type (
	// CustomerListSlice is an alias for a slice of pointers to CustomerList.
	// This should almost always be used instead of []CustomerList.
	CustomerListSlice []*CustomerList
	// CustomerListHook is the signature for custom CustomerList hook methods
	CustomerListHook func(context.Context, boil.ContextExecutor, *CustomerList) error

	customerListQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	customerListType           = reflect.TypeOf(&CustomerList{})
	customerListMapping        = queries.MakeStructMapping(customerListType)
	customerListInsertCacheMut sync.RWMutex
	customerListInsertCache    = make(map[string]insertCache)
	customerListUpdateCacheMut sync.RWMutex
	customerListUpdateCache    = make(map[string]updateCache)
	customerListUpsertCacheMut sync.RWMutex
	customerListUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var customerListAfterSelectMu sync.Mutex
var customerListAfterSelectHooks []CustomerListHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CustomerList) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerListAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCustomerListHook registers your hook function for all future operations.
func AddCustomerListHook(hookPoint boil.HookPoint, customerListHook CustomerListHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		customerListAfterSelectMu.Lock()
		customerListAfterSelectHooks = append(customerListAfterSelectHooks, customerListHook)
		customerListAfterSelectMu.Unlock()
	}
}

// One returns a single customerList record from the query.
func (q customerListQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CustomerList, error) {
	o := &CustomerList{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for customer_list")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CustomerList records from the query.
func (q customerListQuery) All(ctx context.Context, exec boil.ContextExecutor) (CustomerListSlice, error) {
	var o []*CustomerList

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CustomerList slice")
	}

	if len(customerListAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CustomerList records in the query.
func (q customerListQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count customer_list rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q customerListQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if customer_list exists")
	}

	return count > 0, nil
}

// CustomerLists retrieves all the records using an executor.
func CustomerLists(mods ...qm.QueryMod) customerListQuery {
	mods = append(mods, qm.From("`customer_list`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`customer_list`.*"})
	}

	return customerListQuery{q}
}
