// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FilmText is an object representing the database table.
type FilmText struct {
	FilmID      int         `boil:"film_id" json:"film_id" toml:"film_id" yaml:"film_id"`
	Title       string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *filmTextR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L filmTextL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FilmTextColumns = struct {
	FilmID      string
	Title       string
	Description string
}{
	FilmID:      "film_id",
	Title:       "title",
	Description: "description",
}

var FilmTextTableColumns = struct {
	FilmID      string
	Title       string
	Description string
}{
	FilmID:      "film_text.film_id",
	Title:       "film_text.title",
	Description: "film_text.description",
}

// Generated where

var FilmTextWhere = struct {
	FilmID      whereHelperint
	Title       whereHelperstring
	Description whereHelpernull_String
}{
	FilmID:      whereHelperint{field: "`film_text`.`film_id`"},
	Title:       whereHelperstring{field: "`film_text`.`title`"},
	Description: whereHelpernull_String{field: "`film_text`.`description`"},
}

// FilmTextRels is where relationship names are stored.
var FilmTextRels = struct {
}{}

// filmTextR is where relationships are stored.
type filmTextR struct {
}

// NewStruct creates a new relationship struct
func (*filmTextR) NewStruct() *filmTextR {
	return &filmTextR{}
}

// filmTextL is where Load methods for each relationship are stored.
type filmTextL struct{}

var (
	filmTextAllColumns            = []string{"film_id", "title", "description"}
	filmTextColumnsWithoutDefault = []string{"film_id", "title", "description"}
	filmTextColumnsWithDefault    = []string{}
	filmTextPrimaryKeyColumns     = []string{"film_id"}
	filmTextGeneratedColumns      = []string{}
)

type (
	// FilmTextSlice is an alias for a slice of pointers to FilmText.
	// This should almost always be used instead of []FilmText.
	FilmTextSlice []*FilmText
	// FilmTextHook is the signature for custom FilmText hook methods
	FilmTextHook func(context.Context, boil.ContextExecutor, *FilmText) error

	filmTextQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	filmTextType                 = reflect.TypeOf(&FilmText{})
	filmTextMapping              = queries.MakeStructMapping(filmTextType)
	filmTextPrimaryKeyMapping, _ = queries.BindMapping(filmTextType, filmTextMapping, filmTextPrimaryKeyColumns)
	filmTextInsertCacheMut       sync.RWMutex
	filmTextInsertCache          = make(map[string]insertCache)
	filmTextUpdateCacheMut       sync.RWMutex
	filmTextUpdateCache          = make(map[string]updateCache)
	filmTextUpsertCacheMut       sync.RWMutex
	filmTextUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var filmTextAfterSelectMu sync.Mutex
var filmTextAfterSelectHooks []FilmTextHook

var filmTextBeforeInsertMu sync.Mutex
var filmTextBeforeInsertHooks []FilmTextHook
var filmTextAfterInsertMu sync.Mutex
var filmTextAfterInsertHooks []FilmTextHook

var filmTextBeforeUpdateMu sync.Mutex
var filmTextBeforeUpdateHooks []FilmTextHook
var filmTextAfterUpdateMu sync.Mutex
var filmTextAfterUpdateHooks []FilmTextHook

var filmTextBeforeDeleteMu sync.Mutex
var filmTextBeforeDeleteHooks []FilmTextHook
var filmTextAfterDeleteMu sync.Mutex
var filmTextAfterDeleteHooks []FilmTextHook

var filmTextBeforeUpsertMu sync.Mutex
var filmTextBeforeUpsertHooks []FilmTextHook
var filmTextAfterUpsertMu sync.Mutex
var filmTextAfterUpsertHooks []FilmTextHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FilmText) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmTextAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FilmText) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmTextBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FilmText) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmTextAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FilmText) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmTextBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FilmText) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmTextAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FilmText) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmTextBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FilmText) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmTextAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FilmText) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmTextBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FilmText) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmTextAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFilmTextHook registers your hook function for all future operations.
func AddFilmTextHook(hookPoint boil.HookPoint, filmTextHook FilmTextHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		filmTextAfterSelectMu.Lock()
		filmTextAfterSelectHooks = append(filmTextAfterSelectHooks, filmTextHook)
		filmTextAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		filmTextBeforeInsertMu.Lock()
		filmTextBeforeInsertHooks = append(filmTextBeforeInsertHooks, filmTextHook)
		filmTextBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		filmTextAfterInsertMu.Lock()
		filmTextAfterInsertHooks = append(filmTextAfterInsertHooks, filmTextHook)
		filmTextAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		filmTextBeforeUpdateMu.Lock()
		filmTextBeforeUpdateHooks = append(filmTextBeforeUpdateHooks, filmTextHook)
		filmTextBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		filmTextAfterUpdateMu.Lock()
		filmTextAfterUpdateHooks = append(filmTextAfterUpdateHooks, filmTextHook)
		filmTextAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		filmTextBeforeDeleteMu.Lock()
		filmTextBeforeDeleteHooks = append(filmTextBeforeDeleteHooks, filmTextHook)
		filmTextBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		filmTextAfterDeleteMu.Lock()
		filmTextAfterDeleteHooks = append(filmTextAfterDeleteHooks, filmTextHook)
		filmTextAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		filmTextBeforeUpsertMu.Lock()
		filmTextBeforeUpsertHooks = append(filmTextBeforeUpsertHooks, filmTextHook)
		filmTextBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		filmTextAfterUpsertMu.Lock()
		filmTextAfterUpsertHooks = append(filmTextAfterUpsertHooks, filmTextHook)
		filmTextAfterUpsertMu.Unlock()
	}
}

// One returns a single filmText record from the query.
func (q filmTextQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FilmText, error) {
	o := &FilmText{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for film_text")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FilmText records from the query.
func (q filmTextQuery) All(ctx context.Context, exec boil.ContextExecutor) (FilmTextSlice, error) {
	var o []*FilmText

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FilmText slice")
	}

	if len(filmTextAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FilmText records in the query.
func (q filmTextQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count film_text rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q filmTextQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if film_text exists")
	}

	return count > 0, nil
}

// FilmTexts retrieves all the records using an executor.
func FilmTexts(mods ...qm.QueryMod) filmTextQuery {
	mods = append(mods, qm.From("`film_text`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`film_text`.*"})
	}

	return filmTextQuery{q}
}

// FindFilmText retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFilmText(ctx context.Context, exec boil.ContextExecutor, filmID int, selectCols ...string) (*FilmText, error) {
	filmTextObj := &FilmText{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `film_text` where `film_id`=?", sel,
	)

	q := queries.Raw(query, filmID)

	err := q.Bind(ctx, exec, filmTextObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from film_text")
	}

	if err = filmTextObj.doAfterSelectHooks(ctx, exec); err != nil {
		return filmTextObj, err
	}

	return filmTextObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FilmText) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no film_text provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(filmTextColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	filmTextInsertCacheMut.RLock()
	cache, cached := filmTextInsertCache[key]
	filmTextInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			filmTextAllColumns,
			filmTextColumnsWithDefault,
			filmTextColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(filmTextType, filmTextMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(filmTextType, filmTextMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `film_text` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `film_text` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `film_text` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, filmTextPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into film_text")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.FilmID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for film_text")
	}

CacheNoHooks:
	if !cached {
		filmTextInsertCacheMut.Lock()
		filmTextInsertCache[key] = cache
		filmTextInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FilmText.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FilmText) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	filmTextUpdateCacheMut.RLock()
	cache, cached := filmTextUpdateCache[key]
	filmTextUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			filmTextAllColumns,
			filmTextPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update film_text, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `film_text` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, filmTextPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(filmTextType, filmTextMapping, append(wl, filmTextPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update film_text row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for film_text")
	}

	if !cached {
		filmTextUpdateCacheMut.Lock()
		filmTextUpdateCache[key] = cache
		filmTextUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q filmTextQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for film_text")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for film_text")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FilmTextSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmTextPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `film_text` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filmTextPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in filmText slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all filmText")
	}
	return rowsAff, nil
}

var mySQLFilmTextUniqueColumns = []string{
	"film_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FilmText) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no film_text provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(filmTextColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFilmTextUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	filmTextUpsertCacheMut.RLock()
	cache, cached := filmTextUpsertCache[key]
	filmTextUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			filmTextAllColumns,
			filmTextColumnsWithDefault,
			filmTextColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			filmTextAllColumns,
			filmTextPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert film_text, could not build update column list")
		}

		ret := strmangle.SetComplement(filmTextAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`film_text`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `film_text` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(filmTextType, filmTextMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(filmTextType, filmTextMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for film_text")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(filmTextType, filmTextMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for film_text")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for film_text")
	}

CacheNoHooks:
	if !cached {
		filmTextUpsertCacheMut.Lock()
		filmTextUpsertCache[key] = cache
		filmTextUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FilmText record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FilmText) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FilmText provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), filmTextPrimaryKeyMapping)
	sql := "DELETE FROM `film_text` WHERE `film_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from film_text")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for film_text")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q filmTextQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no filmTextQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from film_text")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for film_text")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FilmTextSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(filmTextBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmTextPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `film_text` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filmTextPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from filmText slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for film_text")
	}

	if len(filmTextAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FilmText) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFilmText(ctx, exec, o.FilmID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FilmTextSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FilmTextSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmTextPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `film_text`.* FROM `film_text` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filmTextPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FilmTextSlice")
	}

	*o = slice

	return nil
}

// FilmTextExists checks if the FilmText row exists.
func FilmTextExists(ctx context.Context, exec boil.ContextExecutor, filmID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `film_text` where `film_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, filmID)
	}
	row := exec.QueryRowContext(ctx, sql, filmID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if film_text exists")
	}

	return exists, nil
}

// Exists checks if the FilmText row exists.
func (o *FilmText) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FilmTextExists(ctx, exec, o.FilmID)
}
