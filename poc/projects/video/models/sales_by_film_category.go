// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// SalesByFilmCategory is an object representing the database table.
type SalesByFilmCategory struct {
	Category   string            `boil:"category" json:"category" toml:"category" yaml:"category"`
	TotalSales types.NullDecimal `boil:"total_sales" json:"total_sales,omitempty" toml:"total_sales" yaml:"total_sales,omitempty"`
}

var SalesByFilmCategoryColumns = struct {
	Category   string
	TotalSales string
}{
	Category:   "category",
	TotalSales: "total_sales",
}

var SalesByFilmCategoryTableColumns = struct {
	Category   string
	TotalSales string
}{
	Category:   "sales_by_film_category.category",
	TotalSales: "sales_by_film_category.total_sales",
}

// Generated where

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var SalesByFilmCategoryWhere = struct {
	Category   whereHelperstring
	TotalSales whereHelpertypes_NullDecimal
}{
	Category:   whereHelperstring{field: "`sales_by_film_category`.`category`"},
	TotalSales: whereHelpertypes_NullDecimal{field: "`sales_by_film_category`.`total_sales`"},
}

var (
	salesByFilmCategoryAllColumns            = []string{"category", "total_sales"}
	salesByFilmCategoryColumnsWithoutDefault = []string{"category", "total_sales"}
	salesByFilmCategoryColumnsWithDefault    = []string{}
	salesByFilmCategoryPrimaryKeyColumns     = []string{}
	salesByFilmCategoryGeneratedColumns      = []string{}
)

type (
	// SalesByFilmCategorySlice is an alias for a slice of pointers to SalesByFilmCategory.
	// This should almost always be used instead of []SalesByFilmCategory.
	SalesByFilmCategorySlice []*SalesByFilmCategory
	// SalesByFilmCategoryHook is the signature for custom SalesByFilmCategory hook methods
	SalesByFilmCategoryHook func(context.Context, boil.ContextExecutor, *SalesByFilmCategory) error

	salesByFilmCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	salesByFilmCategoryType           = reflect.TypeOf(&SalesByFilmCategory{})
	salesByFilmCategoryMapping        = queries.MakeStructMapping(salesByFilmCategoryType)
	salesByFilmCategoryInsertCacheMut sync.RWMutex
	salesByFilmCategoryInsertCache    = make(map[string]insertCache)
	salesByFilmCategoryUpdateCacheMut sync.RWMutex
	salesByFilmCategoryUpdateCache    = make(map[string]updateCache)
	salesByFilmCategoryUpsertCacheMut sync.RWMutex
	salesByFilmCategoryUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var salesByFilmCategoryAfterSelectMu sync.Mutex
var salesByFilmCategoryAfterSelectHooks []SalesByFilmCategoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SalesByFilmCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesByFilmCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSalesByFilmCategoryHook registers your hook function for all future operations.
func AddSalesByFilmCategoryHook(hookPoint boil.HookPoint, salesByFilmCategoryHook SalesByFilmCategoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		salesByFilmCategoryAfterSelectMu.Lock()
		salesByFilmCategoryAfterSelectHooks = append(salesByFilmCategoryAfterSelectHooks, salesByFilmCategoryHook)
		salesByFilmCategoryAfterSelectMu.Unlock()
	}
}

// One returns a single salesByFilmCategory record from the query.
func (q salesByFilmCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SalesByFilmCategory, error) {
	o := &SalesByFilmCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sales_by_film_category")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SalesByFilmCategory records from the query.
func (q salesByFilmCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (SalesByFilmCategorySlice, error) {
	var o []*SalesByFilmCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SalesByFilmCategory slice")
	}

	if len(salesByFilmCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SalesByFilmCategory records in the query.
func (q salesByFilmCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sales_by_film_category rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q salesByFilmCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sales_by_film_category exists")
	}

	return count > 0, nil
}

// SalesByFilmCategories retrieves all the records using an executor.
func SalesByFilmCategories(mods ...qm.QueryMod) salesByFilmCategoryQuery {
	mods = append(mods, qm.From("`sales_by_film_category`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sales_by_film_category`.*"})
	}

	return salesByFilmCategoryQuery{q}
}
