// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FilmActor is an object representing the database table.
type FilmActor struct {
	ActorID    uint16    `boil:"actor_id" json:"actor_id" toml:"actor_id" yaml:"actor_id"`
	FilmID     uint16    `boil:"film_id" json:"film_id" toml:"film_id" yaml:"film_id"`
	LastUpdate time.Time `boil:"last_update" json:"last_update" toml:"last_update" yaml:"last_update"`

	R *filmActorR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L filmActorL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FilmActorColumns = struct {
	ActorID    string
	FilmID     string
	LastUpdate string
}{
	ActorID:    "actor_id",
	FilmID:     "film_id",
	LastUpdate: "last_update",
}

var FilmActorTableColumns = struct {
	ActorID    string
	FilmID     string
	LastUpdate string
}{
	ActorID:    "film_actor.actor_id",
	FilmID:     "film_actor.film_id",
	LastUpdate: "film_actor.last_update",
}

// Generated where

var FilmActorWhere = struct {
	ActorID    whereHelperuint16
	FilmID     whereHelperuint16
	LastUpdate whereHelpertime_Time
}{
	ActorID:    whereHelperuint16{field: "`film_actor`.`actor_id`"},
	FilmID:     whereHelperuint16{field: "`film_actor`.`film_id`"},
	LastUpdate: whereHelpertime_Time{field: "`film_actor`.`last_update`"},
}

// FilmActorRels is where relationship names are stored.
var FilmActorRels = struct {
	Actor string
	Film  string
}{
	Actor: "Actor",
	Film:  "Film",
}

// filmActorR is where relationships are stored.
type filmActorR struct {
	Actor *Actor `boil:"Actor" json:"Actor" toml:"Actor" yaml:"Actor"`
	Film  *Film  `boil:"Film" json:"Film" toml:"Film" yaml:"Film"`
}

// NewStruct creates a new relationship struct
func (*filmActorR) NewStruct() *filmActorR {
	return &filmActorR{}
}

func (r *filmActorR) GetActor() *Actor {
	if r == nil {
		return nil
	}
	return r.Actor
}

func (r *filmActorR) GetFilm() *Film {
	if r == nil {
		return nil
	}
	return r.Film
}

// filmActorL is where Load methods for each relationship are stored.
type filmActorL struct{}

var (
	filmActorAllColumns            = []string{"actor_id", "film_id", "last_update"}
	filmActorColumnsWithoutDefault = []string{"actor_id", "film_id"}
	filmActorColumnsWithDefault    = []string{"last_update"}
	filmActorPrimaryKeyColumns     = []string{"actor_id", "film_id"}
	filmActorGeneratedColumns      = []string{}
)

type (
	// FilmActorSlice is an alias for a slice of pointers to FilmActor.
	// This should almost always be used instead of []FilmActor.
	FilmActorSlice []*FilmActor
	// FilmActorHook is the signature for custom FilmActor hook methods
	FilmActorHook func(context.Context, boil.ContextExecutor, *FilmActor) error

	filmActorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	filmActorType                 = reflect.TypeOf(&FilmActor{})
	filmActorMapping              = queries.MakeStructMapping(filmActorType)
	filmActorPrimaryKeyMapping, _ = queries.BindMapping(filmActorType, filmActorMapping, filmActorPrimaryKeyColumns)
	filmActorInsertCacheMut       sync.RWMutex
	filmActorInsertCache          = make(map[string]insertCache)
	filmActorUpdateCacheMut       sync.RWMutex
	filmActorUpdateCache          = make(map[string]updateCache)
	filmActorUpsertCacheMut       sync.RWMutex
	filmActorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var filmActorAfterSelectMu sync.Mutex
var filmActorAfterSelectHooks []FilmActorHook

var filmActorBeforeInsertMu sync.Mutex
var filmActorBeforeInsertHooks []FilmActorHook
var filmActorAfterInsertMu sync.Mutex
var filmActorAfterInsertHooks []FilmActorHook

var filmActorBeforeUpdateMu sync.Mutex
var filmActorBeforeUpdateHooks []FilmActorHook
var filmActorAfterUpdateMu sync.Mutex
var filmActorAfterUpdateHooks []FilmActorHook

var filmActorBeforeDeleteMu sync.Mutex
var filmActorBeforeDeleteHooks []FilmActorHook
var filmActorAfterDeleteMu sync.Mutex
var filmActorAfterDeleteHooks []FilmActorHook

var filmActorBeforeUpsertMu sync.Mutex
var filmActorBeforeUpsertHooks []FilmActorHook
var filmActorAfterUpsertMu sync.Mutex
var filmActorAfterUpsertHooks []FilmActorHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FilmActor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmActorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FilmActor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmActorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FilmActor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmActorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FilmActor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmActorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FilmActor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmActorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FilmActor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmActorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FilmActor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmActorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FilmActor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmActorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FilmActor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmActorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFilmActorHook registers your hook function for all future operations.
func AddFilmActorHook(hookPoint boil.HookPoint, filmActorHook FilmActorHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		filmActorAfterSelectMu.Lock()
		filmActorAfterSelectHooks = append(filmActorAfterSelectHooks, filmActorHook)
		filmActorAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		filmActorBeforeInsertMu.Lock()
		filmActorBeforeInsertHooks = append(filmActorBeforeInsertHooks, filmActorHook)
		filmActorBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		filmActorAfterInsertMu.Lock()
		filmActorAfterInsertHooks = append(filmActorAfterInsertHooks, filmActorHook)
		filmActorAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		filmActorBeforeUpdateMu.Lock()
		filmActorBeforeUpdateHooks = append(filmActorBeforeUpdateHooks, filmActorHook)
		filmActorBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		filmActorAfterUpdateMu.Lock()
		filmActorAfterUpdateHooks = append(filmActorAfterUpdateHooks, filmActorHook)
		filmActorAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		filmActorBeforeDeleteMu.Lock()
		filmActorBeforeDeleteHooks = append(filmActorBeforeDeleteHooks, filmActorHook)
		filmActorBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		filmActorAfterDeleteMu.Lock()
		filmActorAfterDeleteHooks = append(filmActorAfterDeleteHooks, filmActorHook)
		filmActorAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		filmActorBeforeUpsertMu.Lock()
		filmActorBeforeUpsertHooks = append(filmActorBeforeUpsertHooks, filmActorHook)
		filmActorBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		filmActorAfterUpsertMu.Lock()
		filmActorAfterUpsertHooks = append(filmActorAfterUpsertHooks, filmActorHook)
		filmActorAfterUpsertMu.Unlock()
	}
}

// One returns a single filmActor record from the query.
func (q filmActorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FilmActor, error) {
	o := &FilmActor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for film_actor")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FilmActor records from the query.
func (q filmActorQuery) All(ctx context.Context, exec boil.ContextExecutor) (FilmActorSlice, error) {
	var o []*FilmActor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FilmActor slice")
	}

	if len(filmActorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FilmActor records in the query.
func (q filmActorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count film_actor rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q filmActorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if film_actor exists")
	}

	return count > 0, nil
}

// Actor pointed to by the foreign key.
func (o *FilmActor) Actor(mods ...qm.QueryMod) actorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`actor_id` = ?", o.ActorID),
	}

	queryMods = append(queryMods, mods...)

	return Actors(queryMods...)
}

// Film pointed to by the foreign key.
func (o *FilmActor) Film(mods ...qm.QueryMod) filmQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`film_id` = ?", o.FilmID),
	}

	queryMods = append(queryMods, mods...)

	return Films(queryMods...)
}

// LoadActor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (filmActorL) LoadActor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFilmActor interface{}, mods queries.Applicator) error {
	var slice []*FilmActor
	var object *FilmActor

	if singular {
		var ok bool
		object, ok = maybeFilmActor.(*FilmActor)
		if !ok {
			object = new(FilmActor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFilmActor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFilmActor))
			}
		}
	} else {
		s, ok := maybeFilmActor.(*[]*FilmActor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFilmActor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFilmActor))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &filmActorR{}
		}
		args[object.ActorID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &filmActorR{}
			}

			args[obj.ActorID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`actor`),
		qm.WhereIn(`actor.actor_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Actor")
	}

	var resultSlice []*Actor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Actor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for actor")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for actor")
	}

	if len(actorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Actor = foreign
		if foreign.R == nil {
			foreign.R = &actorR{}
		}
		foreign.R.FilmActors = append(foreign.R.FilmActors, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ActorID == foreign.ActorID {
				local.R.Actor = foreign
				if foreign.R == nil {
					foreign.R = &actorR{}
				}
				foreign.R.FilmActors = append(foreign.R.FilmActors, local)
				break
			}
		}
	}

	return nil
}

// LoadFilm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (filmActorL) LoadFilm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFilmActor interface{}, mods queries.Applicator) error {
	var slice []*FilmActor
	var object *FilmActor

	if singular {
		var ok bool
		object, ok = maybeFilmActor.(*FilmActor)
		if !ok {
			object = new(FilmActor)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFilmActor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFilmActor))
			}
		}
	} else {
		s, ok := maybeFilmActor.(*[]*FilmActor)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFilmActor)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFilmActor))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &filmActorR{}
		}
		args[object.FilmID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &filmActorR{}
			}

			args[obj.FilmID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`film`),
		qm.WhereIn(`film.film_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Film")
	}

	var resultSlice []*Film
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Film")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for film")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for film")
	}

	if len(filmAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Film = foreign
		if foreign.R == nil {
			foreign.R = &filmR{}
		}
		foreign.R.FilmActors = append(foreign.R.FilmActors, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FilmID == foreign.FilmID {
				local.R.Film = foreign
				if foreign.R == nil {
					foreign.R = &filmR{}
				}
				foreign.R.FilmActors = append(foreign.R.FilmActors, local)
				break
			}
		}
	}

	return nil
}

// SetActor of the filmActor to the related item.
// Sets o.R.Actor to related.
// Adds o to related.R.FilmActors.
func (o *FilmActor) SetActor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Actor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `film_actor` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"actor_id"}),
		strmangle.WhereClause("`", "`", 0, filmActorPrimaryKeyColumns),
	)
	values := []interface{}{related.ActorID, o.ActorID, o.FilmID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ActorID = related.ActorID
	if o.R == nil {
		o.R = &filmActorR{
			Actor: related,
		}
	} else {
		o.R.Actor = related
	}

	if related.R == nil {
		related.R = &actorR{
			FilmActors: FilmActorSlice{o},
		}
	} else {
		related.R.FilmActors = append(related.R.FilmActors, o)
	}

	return nil
}

// SetFilm of the filmActor to the related item.
// Sets o.R.Film to related.
// Adds o to related.R.FilmActors.
func (o *FilmActor) SetFilm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Film) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `film_actor` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"film_id"}),
		strmangle.WhereClause("`", "`", 0, filmActorPrimaryKeyColumns),
	)
	values := []interface{}{related.FilmID, o.ActorID, o.FilmID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FilmID = related.FilmID
	if o.R == nil {
		o.R = &filmActorR{
			Film: related,
		}
	} else {
		o.R.Film = related
	}

	if related.R == nil {
		related.R = &filmR{
			FilmActors: FilmActorSlice{o},
		}
	} else {
		related.R.FilmActors = append(related.R.FilmActors, o)
	}

	return nil
}

// FilmActors retrieves all the records using an executor.
func FilmActors(mods ...qm.QueryMod) filmActorQuery {
	mods = append(mods, qm.From("`film_actor`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`film_actor`.*"})
	}

	return filmActorQuery{q}
}

// FindFilmActor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFilmActor(ctx context.Context, exec boil.ContextExecutor, actorID uint16, filmID uint16, selectCols ...string) (*FilmActor, error) {
	filmActorObj := &FilmActor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `film_actor` where `actor_id`=? AND `film_id`=?", sel,
	)

	q := queries.Raw(query, actorID, filmID)

	err := q.Bind(ctx, exec, filmActorObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from film_actor")
	}

	if err = filmActorObj.doAfterSelectHooks(ctx, exec); err != nil {
		return filmActorObj, err
	}

	return filmActorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FilmActor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no film_actor provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(filmActorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	filmActorInsertCacheMut.RLock()
	cache, cached := filmActorInsertCache[key]
	filmActorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			filmActorAllColumns,
			filmActorColumnsWithDefault,
			filmActorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(filmActorType, filmActorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(filmActorType, filmActorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `film_actor` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `film_actor` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `film_actor` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, filmActorPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into film_actor")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ActorID,
		o.FilmID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for film_actor")
	}

CacheNoHooks:
	if !cached {
		filmActorInsertCacheMut.Lock()
		filmActorInsertCache[key] = cache
		filmActorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FilmActor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FilmActor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	filmActorUpdateCacheMut.RLock()
	cache, cached := filmActorUpdateCache[key]
	filmActorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			filmActorAllColumns,
			filmActorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update film_actor, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `film_actor` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, filmActorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(filmActorType, filmActorMapping, append(wl, filmActorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update film_actor row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for film_actor")
	}

	if !cached {
		filmActorUpdateCacheMut.Lock()
		filmActorUpdateCache[key] = cache
		filmActorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q filmActorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for film_actor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for film_actor")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FilmActorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmActorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `film_actor` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filmActorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in filmActor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all filmActor")
	}
	return rowsAff, nil
}

var mySQLFilmActorUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FilmActor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no film_actor provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(filmActorColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFilmActorUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	filmActorUpsertCacheMut.RLock()
	cache, cached := filmActorUpsertCache[key]
	filmActorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			filmActorAllColumns,
			filmActorColumnsWithDefault,
			filmActorColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			filmActorAllColumns,
			filmActorPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert film_actor, could not build update column list")
		}

		ret := strmangle.SetComplement(filmActorAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`film_actor`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `film_actor` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(filmActorType, filmActorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(filmActorType, filmActorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for film_actor")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(filmActorType, filmActorMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for film_actor")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for film_actor")
	}

CacheNoHooks:
	if !cached {
		filmActorUpsertCacheMut.Lock()
		filmActorUpsertCache[key] = cache
		filmActorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FilmActor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FilmActor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FilmActor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), filmActorPrimaryKeyMapping)
	sql := "DELETE FROM `film_actor` WHERE `actor_id`=? AND `film_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from film_actor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for film_actor")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q filmActorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no filmActorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from film_actor")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for film_actor")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FilmActorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(filmActorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmActorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `film_actor` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filmActorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from filmActor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for film_actor")
	}

	if len(filmActorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FilmActor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFilmActor(ctx, exec, o.ActorID, o.FilmID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FilmActorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FilmActorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmActorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `film_actor`.* FROM `film_actor` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, filmActorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FilmActorSlice")
	}

	*o = slice

	return nil
}

// FilmActorExists checks if the FilmActor row exists.
func FilmActorExists(ctx context.Context, exec boil.ContextExecutor, actorID uint16, filmID uint16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `film_actor` where `actor_id`=? AND `film_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, actorID, filmID)
	}
	row := exec.QueryRowContext(ctx, sql, actorID, filmID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if film_actor exists")
	}

	return exists, nil
}

// Exists checks if the FilmActor row exists.
func (o *FilmActor) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FilmActorExists(ctx, exec, o.ActorID, o.FilmID)
}
