// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// SalesByStore is an object representing the database table.
type SalesByStore struct {
	Store      null.String       `boil:"store" json:"store,omitempty" toml:"store" yaml:"store,omitempty"`
	Manager    null.String       `boil:"manager" json:"manager,omitempty" toml:"manager" yaml:"manager,omitempty"`
	TotalSales types.NullDecimal `boil:"total_sales" json:"total_sales,omitempty" toml:"total_sales" yaml:"total_sales,omitempty"`
}

var SalesByStoreColumns = struct {
	Store      string
	Manager    string
	TotalSales string
}{
	Store:      "store",
	Manager:    "manager",
	TotalSales: "total_sales",
}

var SalesByStoreTableColumns = struct {
	Store      string
	Manager    string
	TotalSales string
}{
	Store:      "sales_by_store.store",
	Manager:    "sales_by_store.manager",
	TotalSales: "sales_by_store.total_sales",
}

// Generated where

var SalesByStoreWhere = struct {
	Store      whereHelpernull_String
	Manager    whereHelpernull_String
	TotalSales whereHelpertypes_NullDecimal
}{
	Store:      whereHelpernull_String{field: "`sales_by_store`.`store`"},
	Manager:    whereHelpernull_String{field: "`sales_by_store`.`manager`"},
	TotalSales: whereHelpertypes_NullDecimal{field: "`sales_by_store`.`total_sales`"},
}

var (
	salesByStoreAllColumns            = []string{"store", "manager", "total_sales"}
	salesByStoreColumnsWithoutDefault = []string{"store", "manager", "total_sales"}
	salesByStoreColumnsWithDefault    = []string{}
	salesByStorePrimaryKeyColumns     = []string{}
	salesByStoreGeneratedColumns      = []string{}
)

type (
	// SalesByStoreSlice is an alias for a slice of pointers to SalesByStore.
	// This should almost always be used instead of []SalesByStore.
	SalesByStoreSlice []*SalesByStore
	// SalesByStoreHook is the signature for custom SalesByStore hook methods
	SalesByStoreHook func(context.Context, boil.ContextExecutor, *SalesByStore) error

	salesByStoreQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	salesByStoreType           = reflect.TypeOf(&SalesByStore{})
	salesByStoreMapping        = queries.MakeStructMapping(salesByStoreType)
	salesByStoreInsertCacheMut sync.RWMutex
	salesByStoreInsertCache    = make(map[string]insertCache)
	salesByStoreUpdateCacheMut sync.RWMutex
	salesByStoreUpdateCache    = make(map[string]updateCache)
	salesByStoreUpsertCacheMut sync.RWMutex
	salesByStoreUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var salesByStoreAfterSelectMu sync.Mutex
var salesByStoreAfterSelectHooks []SalesByStoreHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SalesByStore) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salesByStoreAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSalesByStoreHook registers your hook function for all future operations.
func AddSalesByStoreHook(hookPoint boil.HookPoint, salesByStoreHook SalesByStoreHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		salesByStoreAfterSelectMu.Lock()
		salesByStoreAfterSelectHooks = append(salesByStoreAfterSelectHooks, salesByStoreHook)
		salesByStoreAfterSelectMu.Unlock()
	}
}

// One returns a single salesByStore record from the query.
func (q salesByStoreQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SalesByStore, error) {
	o := &SalesByStore{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sales_by_store")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SalesByStore records from the query.
func (q salesByStoreQuery) All(ctx context.Context, exec boil.ContextExecutor) (SalesByStoreSlice, error) {
	var o []*SalesByStore

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SalesByStore slice")
	}

	if len(salesByStoreAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SalesByStore records in the query.
func (q salesByStoreQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sales_by_store rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q salesByStoreQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sales_by_store exists")
	}

	return count > 0, nil
}

// SalesByStores retrieves all the records using an executor.
func SalesByStores(mods ...qm.QueryMod) salesByStoreQuery {
	mods = append(mods, qm.From("`sales_by_store`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sales_by_store`.*"})
	}

	return salesByStoreQuery{q}
}
